" -----------------------------------------------------------------------------
" Plugins
" -----------------------------------------------------------------------------

" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Plugins will go here in the middle
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'easymotion/vim-easymotion'
Plug 'vim-airline/vim-airline'
Plug 'altercation/vim-colors-solarized'
Plug 'posva/vim-vue'
Plug 'pangloss/vim-javascript'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'tomtom/tlib_vim'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'
Plug 'octref/RootIgnore'
Plug 'tomlion/vim-solidity'

call plug#end()

" -----------------------------------------------------------------------------
" Helper functions
" -----------------------------------------------------------------------------

function! StripWhitespace()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    :%s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfunction

function! TabStopChange(value)
    execute "set tabstop=".a:value
    execute "set softtabstop=".a:value
    execute "set shiftwidth=".a:value
endfunction

" -----------------------------------------------------------------------------
" Config
" -----------------------------------------------------------------------------

" Map the leader key to ,
let mapleader=","

set showcmd             " Show (partial) command in status line.
set showmatch           " Show matching brackets.
set showmode            " Show current mode.
set ruler               " Show the line and column numbers of the cursor.
set number              " Show the line numbers on the left side.
set relativenumber      " Show the relative numbers on the left side.
set formatoptions+=o    " Continue comment marker in new lines.
set textwidth=0         " Hard-wrap long lines as you type them.
set expandtab           " Insert spaces when TAB is pressed.
set tabstop=2           " Render TABs using this many spaces.
set shiftwidth=2        " Indentation amount for < and > commands.
set mouse=a             " Enable mouse
set display+=lastline

set noerrorbells        " No beeps.
set modeline            " Enable modeline.
set linespace=3         " Set line-spacing to minimum.
set nojoinspaces        " Prevents inserting two spaces after punctuation on a join (J)

" More natural splits
set splitbelow          " Horizontal split below current.
set splitright          " Vertical split to right of current.

if !&scrolloff
  set scrolloff=3       " Show next 3 lines while scrolling.
endif
if !&sidescrolloff
  set sidescrolloff=5   " Show next 5 columns while side-scrolling.
endif
set nostartofline       " Do not jump to first character with page commands.

set ignorecase          " Make searching case insensitive
set smartcase           " ... unless the query has capital letters.
set gdefault            " Use 'g' flag by default with :s/foo/bar/.
set magic               " Use 'magic' patterns (extended regular expressions).

" map the keys 'jk' to the Escape key to improve efficiency.
imap jk <Esc>

" Disable default navigation keys
" All mode: <Up>, <Down>, <Left>, <Right>
nmap <Up>    <nop>
nmap <Down>  <nop>
nmap <Left>  <nop>
nmap <Right> <nop>

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Buffer navigation
nmap <leader>bd :bd!<cr>
nmap <leader>bn :bn<cr>
nmap <leader>bp :bp<cr>

" Tab navigation
map <leader>ti :tabnew<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>

" cd to home
nmap <leader>c :cd ~/

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

" Search and Replace
nmap <Leader>s :%s//g<Left><Left>

" Use ; for commands
" nnoremap ; :
" Use Q to execute default register
nnoremap Q @q


" Tabstop change
nmap <leader>2 :call TabStopChange(2)<cr>
nmap <leader>4 :call TabStopChange(4)<cr>

" Strip trailing whitespace
" Normal mode: <leader>ss
noremap <leader>ss :call StripWhitespace()<cr>

" Opens an edit command with path of currently edited file filled in
" Normal mode: <leader>e
nmap <leader>e :e <c-r>=expand("%:p:h") . "/" <cr>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <leader>te
nmap <leader>te :tabe <c-r>=expand("%:p:h") . "/" <cr>

" cd to home
nmap <leader>c :cd ~/

" Save
" Normal/Insert mode: <c-s>
nmap <c-s> <esc>:w<cr>
imap <c-s> <esc>:w<cr>

" :w! sudo save the file
cmap w!! w !sudo tee % > /dev/null

" syntax
if has('autocmd')
  filetype plugin indent on
endif
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

" colorscheme
set background=dark
colorscheme solarized

" Auto pairs
let g:AutoPairsFlyMode = 1

" File type
" Vue related syntax bug
autocmd FileType vue syntax sync fromstart

" Nerd tree
map <F2> <ESC>:NERDTreeToggle<RETURN>
let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeRespectWildIgnore = 1

" Easy motion
" n-character search motion
map <leader><leader>/ <Plug>(easymotion-sn)
" smartcase
let g:EasyMotion_smartcase = 1

" FZF setup
let $FZF_DEFAULT_COMMAND = 'ag -g ""'
" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ag -g "" | ctags -L -'
" Update tags command
command! UpdateTags execute "!" . g:fzf_tags_command

" map file search fzf
nmap <C-p> :Files<cr>

" Font size
set guifont=Source\ Code\ Pro:h14
